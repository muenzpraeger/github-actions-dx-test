export declare type ReactiveMembraneShadowTarget = object | any[];
export declare type ReactiveMembraneAccessCallback = (obj: any, key: PropertyKey) => void;
export declare type ReactiveMembraneMutationCallback = (obj: any, key: PropertyKey) => void;
export declare type ReactiveMembraneDistortionCallback = (value: any) => any;
export declare type ReactiveMembraneObservableCallback = (value: any) => boolean;
export interface ObservableMembraneInit {
    valueMutated?: ReactiveMembraneMutationCallback;
    valueObserved?: ReactiveMembraneAccessCallback;
    valueDistortion?: ReactiveMembraneDistortionCallback;
    valueIsObservable?: ReactiveMembraneObservableCallback;
}
export declare function wrapDescriptor(membrane: ReactiveMembrane, descriptor: PropertyDescriptor, getValue: (membrane: ReactiveMembrane, originalValue: any) => any): PropertyDescriptor;
export declare class ReactiveMembrane {
    valueDistortion: ReactiveMembraneDistortionCallback;
    valueMutated: ReactiveMembraneMutationCallback;
    valueObserved: ReactiveMembraneAccessCallback;
    valueIsObservable: ReactiveMembraneObservableCallback;
    private objectGraph;
    constructor(options?: ObservableMembraneInit);
    getProxy(value: any): any;
    getReadOnlyProxy(value: any): any;
    unwrapProxy(p: any): any;
    private getReactiveState(value, distortedValue);
}
