import { ReactiveMembrane, ReactiveMembraneShadowTarget } from './reactive-membrane';
export declare class ReactiveProxyHandler {
    private originalTarget;
    private membrane;
    constructor(membrane: ReactiveMembrane, value: any);
    get(shadowTarget: ReactiveMembraneShadowTarget, key: PropertyKey): any;
    set(shadowTarget: ReactiveMembraneShadowTarget, key: PropertyKey, value: any): boolean;
    deleteProperty(shadowTarget: ReactiveMembraneShadowTarget, key: PropertyKey): boolean;
    apply(shadowTarget: ReactiveMembraneShadowTarget, thisArg: any, argArray: any[]): void;
    construct(target: ReactiveMembraneShadowTarget, argArray: any, newTarget?: any): any;
    has(shadowTarget: ReactiveMembraneShadowTarget, key: PropertyKey): boolean;
    ownKeys(shadowTarget: ReactiveMembraneShadowTarget): string[];
    isExtensible(shadowTarget: ReactiveMembraneShadowTarget): boolean;
    setPrototypeOf(shadowTarget: ReactiveMembraneShadowTarget, prototype: any): any;
    getPrototypeOf(shadowTarget: ReactiveMembraneShadowTarget): object;
    getOwnPropertyDescriptor(shadowTarget: ReactiveMembraneShadowTarget, key: PropertyKey): PropertyDescriptor | undefined;
    preventExtensions(shadowTarget: ReactiveMembraneShadowTarget): boolean;
    defineProperty(shadowTarget: ReactiveMembraneShadowTarget, key: PropertyKey, descriptor: PropertyDescriptor): boolean;
}
