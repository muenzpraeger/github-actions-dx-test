/**
 * This module is responsible for producing the ComponentDef object that is always
 * accessible via `vm.def`. This is lazily created during the creation of the first
 * instance of a component class, and shared across all instances.
 *
 * This structure can be used to synthetically create proxies, and understand the
 * shape of a component. It is also used internally to apply extra optimizations.
 */
import { ComponentConstructor, ErrorCallback } from './component';
import { Template } from './template';
export interface ComponentDef extends DecoratorMeta {
    name: string;
    template: Template;
    ctor: ComponentConstructor;
    bridge: HTMLElementConstructor;
    connectedCallback?: () => void;
    disconnectedCallback?: () => void;
    renderedCallback?: () => void;
    render: () => Template;
    errorCallback?: ErrorCallback;
}
/**
 * EXPERIMENTAL: This function allows for the identification of LWC
 * constructors. This API is subject to change or being removed.
 */
export declare function isComponentConstructor(ctor: any): ctor is ComponentConstructor;
/**
 * EXPERIMENTAL: This function allows for the collection of internal
 * component metadata. This API is subject to change or being removed.
 */
export declare function getComponentDef(Ctor: any, subclassComponentName?: string): ComponentDef;
/**
 * EXPERIMENTAL: This function provides access to the component constructor,
 * given an HTMLElement. This API is subject to change or being removed.
 */
export declare function getComponentConstructor(elm: HTMLElement): ComponentConstructor | null;
export declare function setElementProto(elm: HTMLElement, def: ComponentDef): void;
import { HTMLElementConstructor } from './base-bridge-element';
import { DecoratorMeta } from './decorators/register';
