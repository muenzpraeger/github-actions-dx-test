import { ComponentConstructor } from '../component';
export interface PropDef {
    config: number;
    type: string;
    attr: string;
}
export interface WireDef {
    method?: number;
    [key: string]: any;
}
export interface PropsDef {
    [key: string]: PropDef;
}
interface TrackDef {
    [key: string]: 1;
}
declare type PublicMethod = (...args: any[]) => any;
interface MethodDef {
    [key: string]: PublicMethod;
}
export interface WireHash {
    [key: string]: WireDef;
}
export interface RegisterDecoratorMeta {
    readonly publicMethods?: string[];
    readonly publicProps?: PropsDef;
    readonly track?: TrackDef;
    readonly wire?: WireHash;
}
export interface DecoratorMeta {
    wire: WireHash | undefined;
    track: TrackDef;
    props: PropsDef;
    methods: MethodDef;
}
/**
 * INTERNAL: This function can only be invoked by compiled code. The compiler
 * will prevent this function from being imported by userland code.
 */
export declare function registerDecorators(Ctor: ComponentConstructor, meta: RegisterDecoratorMeta): ComponentConstructor;
export declare function getDecoratorsRegisteredMeta(Ctor: ComponentConstructor): DecoratorMeta | undefined;
export {};
