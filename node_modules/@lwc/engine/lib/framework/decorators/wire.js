"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/*
 * Copyright (c) 2018, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: MIT
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
 */
const track_1 = require("./track");
const assert_1 = __importDefault(require("../../shared/assert"));
const language_1 = require("../../shared/language");
function wireDecorator(target, prop, descriptor) {
    if (process.env.NODE_ENV !== 'production') {
        if (!language_1.isUndefined(descriptor)) {
            const { get, set, configurable, writable } = descriptor;
            assert_1.default.isTrue(!get && !set, `Compiler Error: A @wire decorator can only be applied to a public field.`);
            assert_1.default.isTrue(configurable !== false, `Compiler Error: A @wire decorator can only be applied to a configurable property.`);
            assert_1.default.isTrue(writable !== false, `Compiler Error: A @wire decorator can only be applied to a writable property.`);
        }
    }
    return track_1.createTrackedPropertyDescriptor(target, prop, language_1.isObject(descriptor) ? descriptor.enumerable === true : true);
}
/**
 * @wire decorator to wire fields and methods to a wire adapter in
 * LWC Components. This function implements the internals of this
 * decorator.
 */
function wire(_adapter, _config) {
    const len = arguments.length;
    if (len > 0 && len < 3) {
        return wireDecorator;
    }
    else {
        if (process.env.NODE_ENV !== 'production') {
            assert_1.default.fail('@wire(adapter, config?) may only be used as a decorator.');
        }
        throw new TypeError();
    }
}
exports.default = wire;
//# sourceMappingURL=wire.js.map