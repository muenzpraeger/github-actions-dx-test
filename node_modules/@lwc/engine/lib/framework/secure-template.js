"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const signedTemplateSet = new Set();
function defaultEmptyTemplate() {
    return [];
}
exports.defaultEmptyTemplate = defaultEmptyTemplate;
signedTemplateSet.add(defaultEmptyTemplate);
function isTemplateRegistered(tpl) {
    return signedTemplateSet.has(tpl);
}
exports.isTemplateRegistered = isTemplateRegistered;
/**
 * INTERNAL: This function can only be invoked by compiled code. The compiler
 * will prevent this function from being imported by userland code.
 */
function registerTemplate(tpl) {
    signedTemplateSet.add(tpl);
    // chaining this method as a way to wrap existing
    // assignment of templates easily, without too much transformation
    return tpl;
}
exports.registerTemplate = registerTemplate;
/**
 * EXPERIMENTAL: This function acts like a hook for Lightning Locker
 * Service and other similar libraries to sanitize vulnerable attributes.
 * This API is subject to change or being removed.
 */
function sanitizeAttribute(tagName, namespaceUri, attrName, attrValue) {
    // locker-service patches this function during runtime to sanitize vulnerable attributes.
    // when ran off-core this function becomes a noop and returns the user authored value.
    return attrValue;
}
exports.sanitizeAttribute = sanitizeAttribute;
//# sourceMappingURL=secure-template.js.map