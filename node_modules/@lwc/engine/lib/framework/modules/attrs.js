"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/*
 * Copyright (c) 2018, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: MIT
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
 */
const assert_1 = __importDefault(require("../../shared/assert"));
const attributes_1 = require("../attributes");
const language_1 = require("../../shared/language");
const utils_1 = require("../utils");
const xlinkNS = 'http://www.w3.org/1999/xlink';
const xmlNS = 'http://www.w3.org/XML/1998/namespace';
const ColonCharCode = 58;
function updateAttrs(oldVnode, vnode) {
    const { data: { attrs }, } = vnode;
    if (language_1.isUndefined(attrs)) {
        return;
    }
    let { data: { attrs: oldAttrs }, } = oldVnode;
    if (oldAttrs === attrs) {
        return;
    }
    if (process.env.NODE_ENV !== 'production') {
        assert_1.default.invariant(language_1.isUndefined(oldAttrs) || language_1.keys(oldAttrs).join(',') === language_1.keys(attrs).join(','), `vnode.data.attrs cannot change shape.`);
    }
    const elm = vnode.elm;
    let key;
    oldAttrs = language_1.isUndefined(oldAttrs) ? utils_1.EmptyObject : oldAttrs;
    // update modified attributes, add new attributes
    // this routine is only useful for data-* attributes in all kind of elements
    // and aria-* in standard elements (custom elements will use props for these)
    for (key in attrs) {
        const cur = attrs[key];
        const old = oldAttrs[key];
        if (old !== cur) {
            attributes_1.unlockAttribute(elm, key);
            if (language_1.StringCharCodeAt.call(key, 3) === ColonCharCode) {
                // Assume xml namespace
                elm.setAttributeNS(xmlNS, key, cur);
            }
            else if (language_1.StringCharCodeAt.call(key, 5) === ColonCharCode) {
                // Assume xlink namespace
                elm.setAttributeNS(xlinkNS, key, cur);
            }
            else if (language_1.isNull(cur)) {
                elm.removeAttribute(key);
            }
            else {
                elm.setAttribute(key, cur);
            }
            attributes_1.lockAttribute(elm, key);
        }
    }
}
const emptyVNode = { data: {} };
exports.default = {
    create: (vnode) => updateAttrs(emptyVNode, vnode),
    update: updateAttrs,
};
//# sourceMappingURL=attrs.js.map