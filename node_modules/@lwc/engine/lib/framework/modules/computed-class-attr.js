"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/*
 * Copyright (c) 2018, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: MIT
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
 */
const utils_1 = require("../utils");
const language_1 = require("../../shared/language");
const classNameToClassMap = language_1.create(null);
function getMapFromClassName(className) {
    // Intentionally using == to match undefined and null values from computed style attribute
    if (className == null) {
        return utils_1.EmptyObject;
    }
    // computed class names must be string
    className = language_1.isString(className) ? className : className + '';
    let map = classNameToClassMap[className];
    if (map) {
        return map;
    }
    map = language_1.create(null);
    let start = 0;
    let o;
    const len = className.length;
    for (o = 0; o < len; o++) {
        if (language_1.StringCharCodeAt.call(className, o) === utils_1.SPACE_CHAR) {
            if (o > start) {
                map[language_1.StringSlice.call(className, start, o)] = true;
            }
            start = o + 1;
        }
    }
    if (o > start) {
        map[language_1.StringSlice.call(className, start, o)] = true;
    }
    classNameToClassMap[className] = map;
    if (process.env.NODE_ENV !== 'production') {
        // just to make sure that this object never changes as part of the diffing algo
        language_1.freeze(map);
    }
    return map;
}
function updateClassAttribute(oldVnode, vnode) {
    const { elm, data: { className: newClass }, } = vnode;
    const { data: { className: oldClass }, } = oldVnode;
    if (oldClass === newClass) {
        return;
    }
    const { classList } = elm;
    const newClassMap = getMapFromClassName(newClass);
    const oldClassMap = getMapFromClassName(oldClass);
    let name;
    for (name in oldClassMap) {
        // remove only if it is not in the new class collection and it is not set from within the instance
        if (language_1.isUndefined(newClassMap[name])) {
            classList.remove(name);
        }
    }
    for (name in newClassMap) {
        if (language_1.isUndefined(oldClassMap[name])) {
            classList.add(name);
        }
    }
}
const emptyVNode = { data: {} };
exports.default = {
    create: (vnode) => updateClassAttribute(emptyVNode, vnode),
    update: updateClassAttribute,
};
//# sourceMappingURL=computed-class-attr.js.map