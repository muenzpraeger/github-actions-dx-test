import { VM, UninitializedVM } from './vm';
import { VNodes } from '../3rdparty/snabbdom/types';
import { Template } from './template';
export declare type ErrorCallback = (error: any, stack: string) => void;
export interface ComponentInterface {
    setAttribute(attrName: string, value: any): void;
}
export interface ComponentConstructor {
    new (): ComponentInterface;
    readonly name: string;
    readonly labels?: string[];
    readonly delegatesFocus?: boolean;
}
export interface ComponentMeta {
    readonly name: string;
    readonly template?: Template;
}
/**
 * INTERNAL: This function can only be invoked by compiled code. The compiler
 * will prevent this function from being imported by userland code.
 */
export declare function registerComponent(Ctor: ComponentConstructor, { name, tmpl: template }: {
    name: any;
    tmpl: any;
}): ComponentConstructor;
export declare function getComponentRegisteredMeta(Ctor: ComponentConstructor): ComponentMeta | undefined;
export declare function createComponent(uninitializedVm: UninitializedVM, Ctor: ComponentConstructor): void;
export declare function linkComponent(vm: VM): void;
export declare function clearReactiveListeners(vm: VM): void;
export declare function renderComponent(vm: VM): VNodes;
export declare function markComponentAsDirty(vm: VM): void;
export declare function getWrappedComponentsListener(vm: VM, listener: EventListener): EventListener;
export declare function getComponentAsString(component: ComponentInterface): string;
