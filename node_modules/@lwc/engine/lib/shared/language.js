"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/*
 * Copyright (c) 2018, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: MIT
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
 */
const { freeze, seal, keys, create, assign, defineProperty, getPrototypeOf, setPrototypeOf, getOwnPropertyDescriptor, getOwnPropertyNames, defineProperties, hasOwnProperty, } = Object;
exports.freeze = freeze;
exports.seal = seal;
exports.keys = keys;
exports.create = create;
exports.assign = assign;
exports.defineProperty = defineProperty;
exports.getPrototypeOf = getPrototypeOf;
exports.setPrototypeOf = setPrototypeOf;
exports.getOwnPropertyDescriptor = getOwnPropertyDescriptor;
exports.getOwnPropertyNames = getOwnPropertyNames;
exports.defineProperties = defineProperties;
exports.hasOwnProperty = hasOwnProperty;
const { isArray } = Array;
exports.isArray = isArray;
const { slice: ArraySlice, splice: ArraySplice, unshift: ArrayUnshift, indexOf: ArrayIndexOf, push: ArrayPush, map: ArrayMap, join: ArrayJoin, forEach, reduce: ArrayReduce, } = Array.prototype;
exports.ArraySlice = ArraySlice;
exports.ArraySplice = ArraySplice;
exports.ArrayUnshift = ArrayUnshift;
exports.ArrayIndexOf = ArrayIndexOf;
exports.ArrayPush = ArrayPush;
exports.ArrayMap = ArrayMap;
exports.ArrayJoin = ArrayJoin;
exports.forEach = forEach;
exports.ArrayReduce = ArrayReduce;
const { replace: StringReplace, toLowerCase: StringToLowerCase, charCodeAt: StringCharCodeAt, slice: StringSlice, } = String.prototype;
exports.StringReplace = StringReplace;
exports.StringToLowerCase = StringToLowerCase;
exports.StringCharCodeAt = StringCharCodeAt;
exports.StringSlice = StringSlice;
function isUndefined(obj) {
    return obj === undefined;
}
exports.isUndefined = isUndefined;
function isNull(obj) {
    return obj === null;
}
exports.isNull = isNull;
function isTrue(obj) {
    return obj === true;
}
exports.isTrue = isTrue;
function isFalse(obj) {
    return obj === false;
}
exports.isFalse = isFalse;
function isFunction(obj) {
    return typeof obj === 'function';
}
exports.isFunction = isFunction;
function isObject(obj) {
    return typeof obj === 'object';
}
exports.isObject = isObject;
function isString(obj) {
    return typeof obj === 'string';
}
exports.isString = isString;
function isNumber(obj) {
    return typeof obj === 'number';
}
exports.isNumber = isNumber;
const OtS = {}.toString;
function toString(obj) {
    if (obj && obj.toString) {
        // Arrays might hold objects with "null" prototype
        // So using Array.prototype.toString directly will cause an error
        // Iterate through all the items and handle individually.
        if (isArray(obj)) {
            return ArrayJoin.call(ArrayMap.call(obj, toString), ',');
        }
        return obj.toString();
    }
    else if (typeof obj === 'object') {
        return OtS.call(obj);
    }
    else {
        return obj + exports.emptyString;
    }
}
exports.toString = toString;
function getPropertyDescriptor(o, p) {
    do {
        const d = getOwnPropertyDescriptor(o, p);
        if (!isUndefined(d)) {
            return d;
        }
        o = getPrototypeOf(o);
    } while (o !== null);
}
exports.getPropertyDescriptor = getPropertyDescriptor;
exports.emptyString = '';
//# sourceMappingURL=language.js.map