import { LightningElement } from './engine';
import { ConfigContext, ReactiveParameter } from './wiring';
/**
 * Marks a reactive parameter as having changed.
 * @param cmp The component
 * @param reactiveParameter Reactive parameter that has changed
 * @param configContext The service context
 */
export declare function updated(cmp: LightningElement, reactiveParameter: ReactiveParameter, configContext: ConfigContext): void;
/**
 * Gets the value of an @wire reactive parameter.
 * @param cmp The component
 * @param reactiveParameter The parameter to get
 */
export declare function getReactiveParameterValue(cmp: LightningElement, reactiveParameter: ReactiveParameter): any;
/**
 * Installs setter override to trap changes to a property, triggering the config listeners.
 * @param cmp The component
 * @param reactiveParameter Reactive parameter that defines the property to monitor
 * @param configContext The service context
 */
export declare function installTrap(cmp: LightningElement, reactiveParameter: ReactiveParameter, configContext: ConfigContext): void;
/**
 * Finds the descriptor of the named property on the prototype chain
 * @param target The target instance/constructor function
 * @param propName Name of property to find
 * @param protoSet Prototypes searched (to avoid circular prototype chains)
 */
export declare function findDescriptor(target: any, propName: PropertyKey, protoSet?: any[]): PropertyDescriptor | null;
