"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/*
 * Copyright (c) 2018, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: MIT
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
 */
const language_1 = require("./language");
/**
 * In IE11, symbols are expensive.
 * Due to the nature of the symbol polyfill. This method abstract the
 * creation of symbols, so we can fallback to string when native symbols
 * are not supported. Note that we can't use typeof since it will fail when transpiling.
 */
const hasNativeSymbolsSupport = Symbol('x').toString() === 'Symbol(x)';
function createFieldName(key) {
    // @ts-ignore: using a string as a symbol for perf reasons
    return hasNativeSymbolsSupport ? Symbol(key) : `$$lwc-${key}$$`;
}
exports.createFieldName = createFieldName;
function setInternalField(o, fieldName, value) {
    // TODO: #1299 - improve this to use a WeakMap
    language_1.defineProperty(o, fieldName, {
        value,
    });
}
exports.setInternalField = setInternalField;
function getInternalField(o, fieldName) {
    return o[fieldName];
}
exports.getInternalField = getInternalField;
//# sourceMappingURL=fields.js.map