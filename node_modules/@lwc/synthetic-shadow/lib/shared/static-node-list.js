"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/*
 * Copyright (c) 2018, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: MIT
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
 */
const language_1 = require("./language");
const fields_1 = require("./fields");
const Items = fields_1.createFieldName('items');
function StaticNodeList() {
    throw new TypeError('Illegal constructor');
}
StaticNodeList.prototype = language_1.create(NodeList.prototype, {
    constructor: {
        writable: true,
        configurable: true,
        value: StaticNodeList,
    },
    item: {
        writable: true,
        enumerable: true,
        configurable: true,
        value(index) {
            return this[index];
        },
    },
    length: {
        enumerable: true,
        configurable: true,
        get() {
            return fields_1.getInternalField(this, Items).length;
        },
    },
    // Iterator protocol
    forEach: {
        writable: true,
        enumerable: true,
        configurable: true,
        value(cb, thisArg) {
            language_1.forEach.call(fields_1.getInternalField(this, Items), cb, thisArg);
        },
    },
    entries: {
        writable: true,
        enumerable: true,
        configurable: true,
        value() {
            return language_1.ArrayMap.call(fields_1.getInternalField(this, Items), (v, i) => [i, v]);
        },
    },
    keys: {
        writable: true,
        enumerable: true,
        configurable: true,
        value() {
            return language_1.ArrayMap.call(fields_1.getInternalField(this, Items), (v, i) => i);
        },
    },
    values: {
        writable: true,
        enumerable: true,
        configurable: true,
        value() {
            return fields_1.getInternalField(this, Items);
        },
    },
    [Symbol.iterator]: {
        writable: true,
        configurable: true,
        value() {
            let nextIndex = 0;
            return {
                next: () => {
                    const items = fields_1.getInternalField(this, Items);
                    return nextIndex < items.length
                        ? {
                            value: items[nextIndex++],
                            done: false,
                        }
                        : {
                            done: true,
                        };
                },
            };
        },
    },
    [Symbol.toStringTag]: {
        configurable: true,
        get() {
            return 'NodeList';
        },
    },
    // IE11 doesn't support Symbol.toStringTag, in which case we
    // provide the regular toString method.
    toString: {
        writable: true,
        configurable: true,
        value() {
            return '[object NodeList]';
        },
    },
});
// prototype inheritance dance
language_1.setPrototypeOf(StaticNodeList, NodeList);
function createStaticNodeList(items) {
    const nodeList = language_1.create(StaticNodeList.prototype);
    fields_1.setInternalField(nodeList, Items, items);
    // setting static indexes
    language_1.forEach.call(items, (item, index) => {
        language_1.defineProperty(nodeList, index, {
            value: item,
            enumerable: true,
            configurable: true,
        });
    });
    return nodeList;
}
exports.createStaticNodeList = createStaticNodeList;
//# sourceMappingURL=static-node-list.js.map