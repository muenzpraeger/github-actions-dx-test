"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/*
 * Copyright (c) 2018, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: MIT
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
 */
const language_1 = require("./language");
/**
 * Writing our own utils to handle NodeList and HTMLCollection. This is to not conflict with
 * some legacy third party libraries like prototype.js that patch Array.prototype.
 */
/**
 * Custom implementation of filter since using Array.prototype.filter conflicts with other
 * legacy libraries like prototype.js
 * Reference: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter#Polyfill
 */
function collectionFilter(collection, fn) {
    const res = [];
    const length = collection.length;
    for (let i = 0; i < length; i++) {
        const curr = collection[i];
        if (language_1.isTrue(fn(curr, i, collection))) {
            language_1.ArrayPush.call(res, curr);
        }
    }
    return res;
}
exports.collectionFilter = collectionFilter;
/**
 * Reference: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find#Polyfill
 */
function collectionFind(collection, fn) {
    const length = collection.length;
    for (let i = 0; i < length; i++) {
        const curr = collection[i];
        if (language_1.isTrue(fn(curr, i, collection))) {
            return curr;
        }
    }
    return undefined;
}
exports.collectionFind = collectionFind;
/**
 * Reference: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice#Streamlining_cross-browser_behavior
 */
function collectionSlice(collection, begin, end) {
    end = !language_1.isUndefined(end) ? end : collection.length;
    const cloned = [];
    const len = collection.length;
    // Handle negative value for "begin"
    let start = !language_1.isUndefined(begin) ? begin : 0;
    start = start >= 0 ? start : Math.max(0, len + start);
    // Handle negative value for "end"
    let upTo = !language_1.isUndefined(end) ? Math.min(end, len) : len;
    if (end < 0) {
        upTo = len + end;
    }
    // Actual expected size of the slice
    const size = upTo - start;
    if (size > 0) {
        for (let i = 0; i < size; i++) {
            language_1.ArrayPush.call(cloned, collection[start + i]);
        }
    }
    return cloned;
}
exports.collectionSlice = collectionSlice;
/**
 * Reference: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf#Polyfill
 */
function collectionIndexOf(collection, searchItem, fromIndex = 0) {
    const len = collection.length;
    let i = Math.min(fromIndex, len);
    if (i < 0) {
        i = Math.max(0, len + i);
    }
    else if (i >= len) {
        return -1;
    }
    for (; i !== len; ++i) {
        if (collection[i] === searchItem) {
            return i;
        }
    }
    return -1;
}
exports.collectionIndexOf = collectionIndexOf;
//# sourceMappingURL=node-collection-util.js.map