/**
 * Writing our own utils to handle NodeList and HTMLCollection. This is to not conflict with
 * some legacy third party libraries like prototype.js that patch Array.prototype.
 */
/**
 * Custom implementation of filter since using Array.prototype.filter conflicts with other
 * legacy libraries like prototype.js
 * Reference: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter#Polyfill
 */
export declare function collectionFilter<T extends Node, K extends Element>(collection: NodeListOf<T> | HTMLCollectionOf<K>, fn: (value: T | K, index?: number, collection?: NodeListOf<T> | HTMLCollectionOf<K>) => boolean): Array<T | K>;
/**
 * Reference: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find#Polyfill
 */
export declare function collectionFind<T extends Node>(collection: NodeListOf<T>, fn: (value: T, index?: number, nodelist?: NodeListOf<T>) => boolean): T | undefined;
/**
 * Reference: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice#Streamlining_cross-browser_behavior
 */
export declare function collectionSlice<T extends Node>(collection: NodeListOf<T>, begin?: number, end?: number): Array<T>;
/**
 * Reference: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf#Polyfill
 */
export declare function collectionIndexOf<T extends Node>(collection: NodeListOf<T>, searchItem: T, fromIndex?: number): number;
