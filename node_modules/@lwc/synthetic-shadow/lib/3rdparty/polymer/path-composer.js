"use strict";
/*
 * Copyright (c) 2018, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: MIT
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
 */
Object.defineProperty(exports, "__esModule", { value: true });
const node_1 = require("./../../env/node");
const traverse_1 = require("./../../faux-shadow/traverse");
const utils_1 = require("../../shared/utils");
/**
@license
Copyright (c) 2016 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/
function pathComposer(startNode, composed) {
    const composedPath = [];
    let current = startNode;
    const startRoot = startNode instanceof Window ? startNode : traverse_1.patchedGetRootNode.call(startNode);
    while (current) {
        composedPath.push(current);
        if (current.assignedSlot) {
            current = current.assignedSlot;
        }
        else if (current.nodeType === node_1.DOCUMENT_FRAGMENT_NODE &&
            current.host &&
            (composed || current !== startRoot)) {
            current = current.host;
        }
        else {
            current = current.parentNode;
        }
    }
    let doc;
    if (startNode instanceof Window) {
        doc = startNode.document;
    }
    else {
        doc = utils_1.getOwnerDocument(startNode);
    }
    // event composedPath includes window when startNode's ownerRoot is document
    if (composedPath[composedPath.length - 1] === doc) {
        composedPath.push(window);
    }
    return composedPath;
}
exports.pathComposer = pathComposer;
//# sourceMappingURL=path-composer.js.map