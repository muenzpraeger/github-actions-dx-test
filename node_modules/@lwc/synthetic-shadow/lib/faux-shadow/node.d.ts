interface NodeConstructor {
    prototype: Node;
    new (): Node;
}
export declare const hasNativeSymbolsSupport: boolean;
export declare function getNodeOwnerKey(node: Node): number | undefined;
export declare function setNodeOwnerKey(node: Node, value: number): void;
export declare function setNodeKey(node: Node, value: number): void;
export declare function getNodeNearestOwnerKey(node: Node): number | undefined;
export declare function getNodeKey(node: Node): number | undefined;
export declare function isNodeShadowed(node: Node): boolean;
export declare function PatchedNode(node: Node): NodeConstructor;
/**
 * These 2 methods are providing a machinery to understand who is accessing the
 * .childNodes member property of a node. If it is used from inside the synthetic shadow
 * or from an external invoker. This helps to produce the right output in one very peculiar
 * case, the IE11 debugging comment for shadowRoot representation on the devtool.
 */
export declare function isExternalChildNodeAccessorFlagOn(): boolean;
export declare const getInternalChildNodes: (node: Node) => NodeListOf<ChildNode>;
export {};
