declare const DOCUMENT_POSITION_CONTAINED_BY: number, DOCUMENT_POSITION_CONTAINS: number, DOCUMENT_POSITION_PRECEDING: number, DOCUMENT_POSITION_FOLLOWING: number, DOCUMENT_FRAGMENT_NODE: number;
declare const appendChild: <T extends Node>(newChild: T) => T, cloneNode: (deep?: boolean | undefined) => Node, compareDocumentPosition: (other: Node) => number, insertBefore: <T extends Node>(newChild: T, refChild: Node | null) => T, removeChild: <T extends Node>(oldChild: T) => T, replaceChild: <T extends Node>(newChild: Node, oldChild: T) => T;
declare const parentNodeGetter: (this: Node) => Element | null;
declare const ownerDocumentGetter: (this: Node) => Document | null;
declare const parentElementGetter: (this: Node) => Element | null;
declare const textContextSetter: (this: Node, s: string) => void;
declare const childNodesGetter: (this: Node) => NodeListOf<Node & Element>;
declare const isConnected: () => any;
export { appendChild, childNodesGetter, cloneNode, compareDocumentPosition, insertBefore, isConnected, parentElementGetter, parentNodeGetter, removeChild, replaceChild, textContextSetter, ownerDocumentGetter, DOCUMENT_POSITION_CONTAINS, DOCUMENT_POSITION_CONTAINED_BY, DOCUMENT_POSITION_PRECEDING, DOCUMENT_POSITION_FOLLOWING, DOCUMENT_FRAGMENT_NODE, };
