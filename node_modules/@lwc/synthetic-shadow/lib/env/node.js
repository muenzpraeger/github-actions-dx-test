"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/*
 * Copyright (c) 2018, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: MIT
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
 */
const language_1 = require("../shared/language");
const { DOCUMENT_POSITION_CONTAINED_BY, DOCUMENT_POSITION_CONTAINS, DOCUMENT_POSITION_PRECEDING, DOCUMENT_POSITION_FOLLOWING, DOCUMENT_FRAGMENT_NODE, } = Node;
exports.DOCUMENT_POSITION_CONTAINED_BY = DOCUMENT_POSITION_CONTAINED_BY;
exports.DOCUMENT_POSITION_CONTAINS = DOCUMENT_POSITION_CONTAINS;
exports.DOCUMENT_POSITION_PRECEDING = DOCUMENT_POSITION_PRECEDING;
exports.DOCUMENT_POSITION_FOLLOWING = DOCUMENT_POSITION_FOLLOWING;
exports.DOCUMENT_FRAGMENT_NODE = DOCUMENT_FRAGMENT_NODE;
const { appendChild, cloneNode, compareDocumentPosition, insertBefore, removeChild, replaceChild, } = Node.prototype;
exports.appendChild = appendChild;
exports.cloneNode = cloneNode;
exports.compareDocumentPosition = compareDocumentPosition;
exports.insertBefore = insertBefore;
exports.removeChild = removeChild;
exports.replaceChild = replaceChild;
const parentNodeGetter = language_1.getOwnPropertyDescriptor(Node.prototype, 'parentNode').get;
exports.parentNodeGetter = parentNodeGetter;
const ownerDocumentGetter = language_1.getOwnPropertyDescriptor(Node.prototype, 'ownerDocument').get;
exports.ownerDocumentGetter = ownerDocumentGetter;
const parentElementGetter = language_1.hasOwnProperty.call(Node.prototype, 'parentElement')
    ? language_1.getOwnPropertyDescriptor(Node.prototype, 'parentElement').get
    : language_1.getOwnPropertyDescriptor(HTMLElement.prototype, 'parentElement').get; // IE11
exports.parentElementGetter = parentElementGetter;
const textContextSetter = language_1.getOwnPropertyDescriptor(Node.prototype, 'textContent').set;
exports.textContextSetter = textContextSetter;
const childNodesGetter = language_1.hasOwnProperty.call(Node.prototype, 'childNodes')
    ? language_1.getOwnPropertyDescriptor(Node.prototype, 'childNodes').get
    : language_1.getOwnPropertyDescriptor(HTMLElement.prototype, 'childNodes').get; // IE11
exports.childNodesGetter = childNodesGetter;
const isConnected = language_1.hasOwnProperty.call(Node.prototype, 'isConnected')
    ? language_1.getOwnPropertyDescriptor(Node.prototype, 'isConnected').get
    : function () {
        const doc = ownerDocumentGetter.call(this);
        // IE11
        return (
        // if doc is null, it means `this` is actually a document instance which
        // is always connected
        doc === null ||
            (compareDocumentPosition.call(doc, this) & DOCUMENT_POSITION_CONTAINED_BY) !== 0);
    };
exports.isConnected = isConnected;
//# sourceMappingURL=node.js.map