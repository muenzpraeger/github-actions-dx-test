"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/*
 * Copyright (c) 2018, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: MIT
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
 */
const language_1 = require("../shared/language");
const { hasAttribute, getAttribute, setAttribute, removeAttribute, querySelectorAll, getBoundingClientRect, getElementsByTagName, getElementsByTagNameNS, } = Element.prototype;
exports.hasAttribute = hasAttribute;
exports.getAttribute = getAttribute;
exports.setAttribute = setAttribute;
exports.removeAttribute = removeAttribute;
exports.querySelectorAll = querySelectorAll;
exports.getBoundingClientRect = getBoundingClientRect;
exports.getElementsByTagName = getElementsByTagName;
exports.getElementsByTagNameNS = getElementsByTagNameNS;
const { addEventListener, removeEventListener } = Element.prototype;
exports.addEventListener = addEventListener;
exports.removeEventListener = removeEventListener;
const innerHTMLSetter = language_1.hasOwnProperty.call(Element.prototype, 'innerHTML')
    ? language_1.getOwnPropertyDescriptor(Element.prototype, 'innerHTML').set
    : language_1.getOwnPropertyDescriptor(HTMLElement.prototype, 'innerHTML').set; // IE11
exports.innerHTMLSetter = innerHTMLSetter;
const outerHTMLSetter = language_1.hasOwnProperty.call(Element.prototype, 'outerHTML')
    ? language_1.getOwnPropertyDescriptor(Element.prototype, 'outerHTML').set
    : language_1.getOwnPropertyDescriptor(HTMLElement.prototype, 'outerHTML').set; // IE11
exports.outerHTMLSetter = outerHTMLSetter;
const tagNameGetter = language_1.getOwnPropertyDescriptor(Element.prototype, 'tagName').get;
exports.tagNameGetter = tagNameGetter;
const tabIndexGetter = language_1.getOwnPropertyDescriptor(HTMLElement.prototype, 'tabIndex').get;
exports.tabIndexGetter = tabIndexGetter;
const matches = language_1.hasOwnProperty.call(Element.prototype, 'matches')
    ? Element.prototype.matches
    : Element.prototype.msMatchesSelector; // IE11
exports.matches = matches;
const childrenGetter = language_1.hasOwnProperty.call(Element.prototype, 'children')
    ? language_1.getOwnPropertyDescriptor(Element.prototype, 'children').get
    : language_1.getOwnPropertyDescriptor(HTMLElement.prototype, 'children').get; // IE11
exports.childrenGetter = childrenGetter;
// for IE11, access from HTMLElement
// for all other browsers access the method from the parent Element interface
const { getElementsByClassName } = HTMLElement.prototype;
exports.getElementsByClassName = getElementsByClassName;
//# sourceMappingURL=element.js.map