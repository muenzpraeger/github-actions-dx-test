"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/*
 * Copyright (c) 2018, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: MIT
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
 */
const t = __importStar(require("@babel/types"));
const camelcase_1 = __importDefault(require("camelcase"));
const ir_1 = require("../shared/ir");
const constants_1 = require("../shared/constants");
const naming_1 = require("../shared/naming");
exports.kebabcaseToCamelcase = naming_1.kebabcaseToCamelcase;
function identifierFromComponentName(name) {
    return t.identifier(`_${camelcase_1.default(name)}`);
}
exports.identifierFromComponentName = identifierFromComponentName;
function getMemberExpressionRoot(expression) {
    let current = expression;
    while (t.isMemberExpression(current)) {
        current = current.object;
    }
    return current;
}
exports.getMemberExpressionRoot = getMemberExpressionRoot;
function objectToAST(obj, valueMapper) {
    return t.objectExpression(Object.keys(obj).map(key => t.objectProperty(t.stringLiteral(key), valueMapper(key))));
}
exports.objectToAST = objectToAST;
/** Returns true if the passed element is a template element */
function isTemplate(element) {
    return element.tag === 'template';
}
exports.isTemplate = isTemplate;
function isStyleSheet(element) {
    return element.tag === 'style';
}
exports.isStyleSheet = isStyleSheet;
/** Returns true if the passed element is a slot element */
function isSlot(element) {
    return element.tag === 'slot';
}
exports.isSlot = isSlot;
/**
 * Returns true if the passed element should be flattened
 * TODO: #1303 - Move this logic into the optimizing compiler. This kind of
 *       optimization should be done before the actual code generation.
 */
function shouldFlatten(element) {
    return element.children.some(child => ir_1.isElement(child) &&
        (!!child.forEach || !!child.forOf || (isTemplate(child) && shouldFlatten(child))));
}
exports.shouldFlatten = shouldFlatten;
function destructuringAssignmentFromObject(target, keys, type = 'const') {
    return t.variableDeclaration(type, [
        t.variableDeclarator(t.objectPattern(keys), target),
    ]);
}
exports.destructuringAssignmentFromObject = destructuringAssignmentFromObject;
function memorizeHandler(codeGen, element, componentHandler, handler) {
    // #439 - The handler can only be memorized if it is bound to component instance
    const id = getMemberExpressionRoot(componentHandler);
    const shouldMemorizeHandler = ir_1.isComponentProp(id, element);
    // Apply memorization if the handler is memorizable.
    //   $cmp.handlePress -> _m1 || ($ctx._m1 = b($cmp.handlePress))
    if (shouldMemorizeHandler) {
        const memorizedId = codeGen.getMemorizationId();
        const memorization = t.assignmentExpression('=', t.memberExpression(t.identifier(constants_1.TEMPLATE_PARAMS.CONTEXT), memorizedId), handler);
        handler = t.logicalExpression('||', memorizedId, memorization);
    }
    return handler;
}
exports.memorizeHandler = memorizeHandler;
function generateTemplateMetadata(state) {
    const metadataExpressions = [];
    // Generate the slots property on template function if slots are defined in the template:
    //      tmpl.slots = ['', 'x']
    if (state.slots.length) {
        const slotsProperty = t.memberExpression(t.identifier(constants_1.TEMPLATE_FUNCTION_NAME), t.identifier('slots'));
        const slotsArray = t.arrayExpression(state.slots.map(slot => t.stringLiteral(slot)));
        const slotsMetadata = t.assignmentExpression('=', slotsProperty, slotsArray);
        metadataExpressions.push(t.expressionStatement(slotsMetadata));
    }
    metadataExpressions.push(...state.inlineStyle.body);
    const hasInlineStyles = state.inlineStyle.body.length;
    const stylesheetsProperty = t.memberExpression(t.identifier(constants_1.TEMPLATE_FUNCTION_NAME), t.identifier('stylesheets'));
    const stylesheetsMetadata = t.assignmentExpression('=', stylesheetsProperty, hasInlineStyles ? t.identifier('stylesheets') : t.arrayExpression());
    metadataExpressions.push(t.expressionStatement(stylesheetsMetadata));
    return metadataExpressions;
}
exports.generateTemplateMetadata = generateTemplateMetadata;
//# sourceMappingURL=helpers.js.map